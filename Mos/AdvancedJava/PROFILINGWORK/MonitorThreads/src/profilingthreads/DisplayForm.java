/*
 * DisplayForm.java
 *
 * Created on April 7, 2005, 12:07 PM
 */

package profilingthreads;

import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author  gs
 */
public class DisplayForm extends javax.swing.JFrame {
    
    private static DisplayForm df = null;
    private static long seconds = 1;    
    private static int threadCount = 1;
    
    /** Creates new form DisplayForm */
    public DisplayForm() {
        initComponents();
        jSpinner1.setModel(new SpinnerNumberModel(30, 10, 90, 1));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {                          
        java.awt.GridBagConstraints gridBagConstraints;

        jButton1 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jButton1.setText("Start!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        getContentPane().add(jButton1, gridBagConstraints);

        jSpinner1.setMinimumSize(new java.awt.Dimension(55, 20));
        jSpinner1.setPreferredSize(new java.awt.Dimension(55, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jSpinner1, gridBagConstraints);

        jLabel1.setText("Seconds Before Notification:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 6);
        getContentPane().add(jLabel1, gridBagConstraints);

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        getContentPane().add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 55);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }                        
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        df.dispose();
        System.exit(0);
    }                                        
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // get seconds value
        Object value = jSpinner1.getValue();
        boolean error = false;
        try {
            seconds = Integer.parseInt(value.toString());
            if (seconds < 10)
                error = true;
        } catch (Exception e) {
            error = true;
        }
        if (error) {
            JOptionPane.showMessageDialog(null, "Seconds must be >=10", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // no error, so disable the button because we only allow
            // one delay at a time.
            jButton1.setEnabled(false);
            
            // wait for the requested seconds - the wrong way, by spinning in
            // a loop here in the event handler.
           long breakTime = System.currentTimeMillis() + (seconds*1000);
            while (true) {
                if (System.currentTimeMillis() >= breakTime) {
                    break;
                }
            }
            notifyUser();
 
            // wait for the requested seconds - the right way, by creating
            // a SwingWorker thread.
 
 /*           SwingWorker worker = new SwingWorker() {
                
                // the construct method runs in a separate thread
                public Object construct() {
                    // specify a thread name
                    Thread.currentThread().setName("Our SwingWorker #" +
                                                    threadCount++);
                    // wait for the requested seconds.
                    long breakTime = System.currentTimeMillis() + (seconds*1000);
                    while (true) {
                        if (System.currentTimeMillis() >= breakTime) break;
                    }
                    return null;
                }
                
                // finished runs on the event dispatch thread, 
                // so it can safely do Swing stuff.
                public void finished() {
                    notifyUser();
                }
            };
            
            // start our SwingWorker thread
            worker.start();
*/
        }
    }                                        

    /**
     * Let the user know the time is up.
     */
    private void notifyUser() {
        this.toFront();
        JOptionPane.showMessageDialog(null, "The elapsed time has passed.", "Notification", JOptionPane.PLAIN_MESSAGE);
        jButton1.setEnabled(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                df = new DisplayForm();
                df.setLocation(20, 30);
                df.setTitle("Notification Utility");
                df.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration                   
    
}
